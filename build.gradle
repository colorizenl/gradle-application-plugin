buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:1.0.0"
    }
}

plugins {
    id "io.freefair.lombok" version "6.5.0.3"
    id "com.github.ben-manes.versions" version "0.42.0"
}

apply plugin: "java-gradle-plugin"
apply plugin: "com.gradle.plugin-publish"
apply plugin: "jacoco"

group = "nl.colorize"
version = "2022.4.5"
sourceCompatibility = "17"
targetCompatibility = "17"
compileJava.options.encoding = "UTF-8"
sourceSets.main.java.srcDirs = ["source"]
sourceSets.main.resources.srcDirs = ["resources"]
sourceSets.test.java.srcDirs = ["test"]
jar.archiveFileName = "application-plugin-${version}.jar"
jar.duplicatesStrategy = DuplicatesStrategy.INCLUDE

repositories {
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation files("lib/appbundler-1.0ea.jar")
    implementation "org.jsoup:jsoup:1.15.2"
    implementation "org.commonmark:commonmark:0.18.1"
    testImplementation "org.junit.jupiter:junit-jupiter:5.9.0"
}

jar {
    from {
        configurations.runtimeClasspath
            .filter { it.toString().endsWith("appbundler-1.0ea.jar") }
            .collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()
}

gradlePlugin {
    plugins {
        applicationPlugin {
            id = "nl.colorize.gradle.application"
            implementationClass = "nl.colorize.gradle.application.ApplicationPlugin"
            displayName = "Gradle application plugin"
            description = "Gradle plugin to build native applications for Mac, iOS, Android, and Windows."
        }
    }
}

pluginBundle {
    website = "http://www.colorize.nl/en/"
    vcsUrl = "https://github.com/colorizenl/gradle-application-plugin"
    tags = ["application", "mac", "macos", "android", "windows", "application bundle", "pwa"]
}

tasks.withType(Test).configureEach {
    jvmArgs(["--add-opens=java.base/java.lang=ALL-UNNAMED", "--add-opens=java.base/java.util=ALL-UNNAMED"])
}

task coverage(dependsOn: ["test", "jacocoTestReport"]) {
    doLast {
        def report = file("${buildDir}/reports/jacoco/test/html/index.html").text
        def coverage = report =~ "tfoot.*?ctr2.*?>([\\d.]+%).*?tfoot"
        println "-" * 40
        println "Test coverage: " + coverage[0][1]
    }
}

task checkSigningIdentity() {
    doLast {
        println project.property("macApplicationBundle.identity.app")
        println project.property("macApplicationBundle.identity.installer")
    }
}
