//-----------------------------------------------------------------------------
// Gradle Application Plugin
// Copyright 2010-2024 Colorize
// Apache license (http://www.apache.org/licenses/LICENSE-2.0)
//-----------------------------------------------------------------------------

package nl.colorize.gradle.application;

import org.gradle.api.Project;
import org.gradle.testfixtures.ProjectBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.gradle.internal.impldep.org.junit.Assert.assertFalse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class AppHelperTest {

    @Test
    void cleanDirectory(@TempDir File tempDir) throws IOException {
        File a = new File(tempDir, "a");
        a.mkdir();

        File b = new File(a, "b.txt");
        Files.writeString(b.toPath(), "test", UTF_8);

        File c = new File(a, "c");
        c.mkdir();

        File d = new File(c, "d.txt");
        Files.writeString(d.toPath(), "test", UTF_8);

        Project project = ProjectBuilder.builder()
            .withProjectDir(tempDir)
            .build();

        ApplicationPlugin plugin = new ApplicationPlugin();
        plugin.apply(project);

        AppHelper.cleanDirectory(a);

        assertTrue(a.exists());
        assertFalse(b.exists());
        assertFalse(c.exists());
        assertFalse(d.exists());
    }

    @Test
    void getOutputDir(@TempDir File tempDir) {
        Project project = ProjectBuilder.builder()
            .withProjectDir(tempDir)
            .build();

        ApplicationPlugin plugin = new ApplicationPlugin();
        plugin.apply(project);

        File outputDir = AppHelper.getOutputDir(project, "test");

        assertEquals("test", outputDir.getName());
        assertEquals("build", outputDir.getParentFile().getName());
    }

    @Test
    void walk(@TempDir Path tempDir) throws IOException {
        Files.writeString(tempDir.resolve("a.txt"), "a", UTF_8);
        Files.writeString(tempDir.resolve("b.txt"), "b", UTF_8);

        List<File> files = AppHelper.walk(tempDir.toFile(), file -> file.getName().startsWith("a"));

        assertEquals(1, files.size());
        assertEquals("a.txt", files.getFirst().getName());
    }

    @Test
    void rewriteTemplate() {
        Map<String, String> placeholders = Map.of(
            "{{cacheName}}", "test",
            "{{resourceFiles}}", "\"first\",\n    \"second\""
        );

        String template = AppHelper.rewriteTemplate("service-worker.js", placeholders);
        String head = template.lines().limit(11).collect(Collectors.joining("\n"));

        String expected = """
            //-----------------------------------------------------------------------------
            // File generated by Colorize Gradle application plugin
            //-----------------------------------------------------------------------------
                        
            const CACHE_NAME = "test";
                        
            const RESOURCE_FILES = [
                "/",
                "first",
                "second"
            ];
            """;

        assertEquals(expected.trim(), head);
    }
}
